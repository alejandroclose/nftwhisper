{
  "data": {
    "listings": [
      {
        "id": 969807,
        "version": 1,
        "price": 27000000,
        "objkt": {
          "id": "FX1-49099",
          "version": 2,
          "name": "Blockchain Automaton #416",
          "slug": "blockchain-automaton-416",
          "metadata": {
            "name": "Blockchain Automaton #416",
            "iterationHash": "ontGindWiQPssJgYVQRfZoN7gKqDcRfMLJhQacqaHMFy8Wgo94F",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=ontGindWiQPssJgYVQRfZoN7gKqDcRfMLJhQacqaHMFy8Wgo94F&fxminter=tz1MT6NGHvgVLbcCveSvDt65Yg7EzUZACDiy",
            "displayUri": "ipfs://QmV8qPAeqjGVshkUKHSZ7k8XXCAeqoETewn7mU3JSkD14g",
            "thumbnailUri": "ipfs://QmVHFUd8PSjG7tepPi6j95VftpvqpnhHEsjqrNabALq8j4",
            "authenticityHash": "6517218f1cfad4f0c501e3b3b88bc453d57dfca083cb5b3f5ac1a0b340a9d0ad",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 13
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969807,
            "version": 1,
            "price": 27000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1bhbx2P33zfCL7DLMEDHxT4rtjQZtqsrXN",
            "name": "emptyocean.tez",
            "flag": "NONE",
            "avatarUri": "ipfs://QmUGVsFGcz5cdhJ2EjB3Fwuaszv3fCpFsHXgJeTfpUvp76",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969806,
        "version": 1,
        "price": 20000000,
        "objkt": {
          "id": "FX0-1524523",
          "version": 1,
          "name": "The Valley #79",
          "slug": "the-valley-79",
          "metadata": {
            "name": "The Valley #79",
            "iterationHash": "ooaLgw2X7L8pjyjH9sGaW4PWNhtTgFhj1XMwCYpoJgnt8tV17DZ",
            "description": "\"The Valley\" is a unique collection of generative art that explores the mysterious and enigmatic valleys on distant planets. Using algorithms, each piece captures the beauty and mood of the different valleys, some of which are more friendly and inviting, while others are bleak and ominous. The unpredictable and abstract nature of the art invites the viewer to see the beauty in the unknown and to be fascinated by the infinite possibilities of the universe. The glitches and digital distortions add an element of unpredictability, enhancing the sense of mystery and intrigue and inviting the viewer to be fully immersed in the art.\n\nThe art is inspired by the aesthetic of old sci-fi magazine covers, with a modern twist that pushes the boundaries of contemporary art. Each piece is a visual representation of the imagination and a tribute to the beauty and fascination of the unknown. Through this collection, the viewer is invited to experience the unknown in a captivating and thought-provoking way. The art invites the viewer to ponder the mysteries of the universe and to be inspired by the beauty of the unknown. This collection is a celebration of the imagination and a testament to the power of generative art to explore the unknown and bring it to life.\n\nGenuary 2023: Landscapes",
            "tags": [
              "Generative Art",
              "Algorithms",
              "Valleys",
              "Distant Planets",
              "Beauty",
              "Mood",
              "Friendly",
              "Inviting",
              "Bleak",
              "Ominous",
              "Unpredictable",
              "Abstract Art",
              "Glitches Digital",
              "Distortions",
              "Mystery",
              "Intrigue",
              "Immersive",
              "Universe",
              "Infinite",
              "genart",
              "genuary",
              "genuary2023",
              "noise",
              "glitch",
              "landscapes"
            ],
            "generatorUri": "ipfs://Qmc4ffZg7NesjfWc1BTy2QgW7L7hCoPooqkAqjeTcSwGgT",
            "artifactUri": "ipfs://Qmc4ffZg7NesjfWc1BTy2QgW7L7hCoPooqkAqjeTcSwGgT?fxhash=ooaLgw2X7L8pjyjH9sGaW4PWNhtTgFhj1XMwCYpoJgnt8tV17DZ",
            "displayUri": "ipfs://QmP4wFsNoRFAseCrkkDw7Krwr9v27piYu5P4Wn4oiuyURz",
            "thumbnailUri": "ipfs://QmRzmEU6aDG2N9qh3oT7VP7FKRaLCU9u9MJSksiUWnxk9Z",
            "authenticityHash": "853d4b03fd45532244ac5da0bb9f2f708f24b6ebdfc304aacb90ccd1572d1ae3",
            "attributes": true,
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969806,
            "version": 1,
            "price": 20000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1NgbNXdC1s2ZMUyiLFgisqBTcGXH9zMwRT",
            "name": "fr330x",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "The Valley",
            "author": {
              "id": "tz1QPnB4SphektbUcYGvfwV9J5soU5t2LeuF",
              "name": "kulesh",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmdrcaQa3DmUebMeBMmJAzGhhJCodrxJNZ8DxUzGdLrkz1",
              "flag": "NONE",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969805,
        "version": 1,
        "price": 80000000,
        "objkt": {
          "id": "FX0-649707",
          "version": 1,
          "name": "Ornithic #234",
          "slug": "ornithic-234",
          "metadata": {
            "name": "Ornithic #234",
            "iterationHash": "ooo3hLYbLLTw2Vy3bAxbchgeyHZoChL8g2b7htU7PMP5J4nq5k7",
            "description": "Pure p5.js code. No svg, no image, no other materials. Creating code arts with polar coordinate system and algorithms are my passion. This generative art contains a lot of features that may be rare than common.  \n\n• 30 color palettes // 2 of them have 3 different colors\n• 4 grass structures // With the same algorithm \n• 16 flower types //  Count, leaf number and size\n• 6 color functions // Different colorizations with b&w \n\nAlso, the outputs of the project are very high resolution to print or something like that.\nApril / 2022\nRhaegar\n",
            "tags": [
              "p5js",
              "plant",
              "flower",
              "polar",
              "colorful"
            ],
            "generatorUri": "ipfs://QmWXEmaWMqYz5zJnc2QtMogSogLxbSZSZnyrvZR4Qogdgj",
            "artifactUri": "ipfs://QmWXEmaWMqYz5zJnc2QtMogSogLxbSZSZnyrvZR4Qogdgj?fxhash=ooo3hLYbLLTw2Vy3bAxbchgeyHZoChL8g2b7htU7PMP5J4nq5k7",
            "displayUri": "ipfs://QmTpy3kUm4H6Q5ELhyciFZicGz8fAEtEYJmaoZWn7RMo5X",
            "thumbnailUri": "ipfs://QmQfcpqS5HrjekN2yqVCZ2H5iG7qs2VLxoH1tLNwYTVD4C",
            "authenticityHash": "4aa7f85d711554b76a8ac0d15ee4d8125c807c119bd602bafcb01717fe57ef1d",
            "attributes": [
              {
                "name": "Grass Type",
                "value": "Finger"
              },
              {
                "name": "Color Style",
                "value": "Flower-Colored"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969805,
            "version": 1,
            "price": 80000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1NgbNXdC1s2ZMUyiLFgisqBTcGXH9zMwRT",
            "name": "fr330x",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Ornithic",
            "author": {
              "id": "tz1VHhigdsDZHgWG5t26enEQiTnA9fR8mrC5",
              "name": "Rhaegar",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmS2dbYvoTmE5JgkFpFh12KmAZDCvEjsZtjj1Vz3VJCTmX",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969804,
        "version": 1,
        "price": 92000000,
        "objkt": {
          "id": "FX0-649544",
          "version": 1,
          "name": "Ornithic #74",
          "slug": "ornithic-74",
          "metadata": {
            "name": "Ornithic #74",
            "iterationHash": "ooEW8w4CoHV14JzbzKQFJLdEbMxKKzKzEgjBBk7bcQyuiw2rqH3",
            "description": "Pure p5.js code. No svg, no image, no other materials. Creating code arts with polar coordinate system and algorithms are my passion. This generative art contains a lot of features that may be rare than common.  \n\n• 30 color palettes // 2 of them have 3 different colors\n• 4 grass structures // With the same algorithm \n• 16 flower types //  Count, leaf number and size\n• 6 color functions // Different colorizations with b&w \n\nAlso, the outputs of the project are very high resolution to print or something like that.\nApril / 2022\nRhaegar\n",
            "tags": [
              "p5js",
              "plant",
              "flower",
              "polar",
              "colorful"
            ],
            "generatorUri": "ipfs://QmWXEmaWMqYz5zJnc2QtMogSogLxbSZSZnyrvZR4Qogdgj",
            "artifactUri": "ipfs://QmWXEmaWMqYz5zJnc2QtMogSogLxbSZSZnyrvZR4Qogdgj?fxhash=ooEW8w4CoHV14JzbzKQFJLdEbMxKKzKzEgjBBk7bcQyuiw2rqH3",
            "displayUri": "ipfs://QmSL4zLVJnGdYfsAMVLKeKiiVGEqpAGzsyHP62QGvrd74x",
            "thumbnailUri": "ipfs://QmRMfKqz4GGecGz5EJPbDgniKFPjruUj7FkZGeFuZk9Tp1",
            "authenticityHash": "e6ddc7f24f56e691ad00334e3ac45d0e6cda2035f8a1c227a7b9a0a774bb75ff",
            "attributes": [
              {
                "name": "Grass Type",
                "value": "Scutch"
              },
              {
                "name": "Color Style",
                "value": "Flower-Colored"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969804,
            "version": 1,
            "price": 92000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1NgbNXdC1s2ZMUyiLFgisqBTcGXH9zMwRT",
            "name": "fr330x",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Ornithic",
            "author": {
              "id": "tz1VHhigdsDZHgWG5t26enEQiTnA9fR8mrC5",
              "name": "Rhaegar",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmS2dbYvoTmE5JgkFpFh12KmAZDCvEjsZtjj1Vz3VJCTmX",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969803,
        "version": 1,
        "price": 12000000,
        "objkt": {
          "id": "FX0-649575",
          "version": 1,
          "name": "Ornithic #105",
          "slug": "ornithic-105",
          "metadata": {
            "name": "Ornithic #105",
            "iterationHash": "oot8fzkyzKcQzJ3UarvEzTkYZ3E4aYaTX93FAQj3bNvpyzZaQRV",
            "description": "Pure p5.js code. No svg, no image, no other materials. Creating code arts with polar coordinate system and algorithms are my passion. This generative art contains a lot of features that may be rare than common.  \n\n• 30 color palettes // 2 of them have 3 different colors\n• 4 grass structures // With the same algorithm \n• 16 flower types //  Count, leaf number and size\n• 6 color functions // Different colorizations with b&w \n\nAlso, the outputs of the project are very high resolution to print or something like that.\nApril / 2022\nRhaegar\n",
            "tags": [
              "p5js",
              "plant",
              "flower",
              "polar",
              "colorful"
            ],
            "generatorUri": "ipfs://QmWXEmaWMqYz5zJnc2QtMogSogLxbSZSZnyrvZR4Qogdgj",
            "artifactUri": "ipfs://QmWXEmaWMqYz5zJnc2QtMogSogLxbSZSZnyrvZR4Qogdgj?fxhash=oot8fzkyzKcQzJ3UarvEzTkYZ3E4aYaTX93FAQj3bNvpyzZaQRV",
            "displayUri": "ipfs://QmVCvLXZ46GQ7MbgmhSPCW6ditxAjD5Z6s6zwkXnho3JWS",
            "thumbnailUri": "ipfs://QmSmqcC1FGCK1mjLY3YeEmk6LkZnXX894cwepwxpjoKPCx",
            "authenticityHash": "13b32c95d01f14f64981ed67e3a548e167b54badd0ddeff28d2bfd169d360f64",
            "attributes": [
              {
                "name": "Grass Type",
                "value": "Scutch"
              },
              {
                "name": "Color Style",
                "value": "Black & White"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969803,
            "version": 1,
            "price": 12000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1NgbNXdC1s2ZMUyiLFgisqBTcGXH9zMwRT",
            "name": "fr330x",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Ornithic",
            "author": {
              "id": "tz1VHhigdsDZHgWG5t26enEQiTnA9fR8mrC5",
              "name": "Rhaegar",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmS2dbYvoTmE5JgkFpFh12KmAZDCvEjsZtjj1Vz3VJCTmX",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969802,
        "version": 1,
        "price": 2000000,
        "objkt": {
          "id": "FX1-49183",
          "version": 2,
          "name": "pathFlow v2 #75",
          "slug": "pathflow-v2-75",
          "metadata": {
            "name": "pathFlow v2 #75",
            "iterationHash": "ook2XSU9kHw35PSf4YDRcTftQmGTBjQARV88YHKdd38TSNDJCMg",
            "description": "created using p5.js\n\n\nTwisted path with changing colors and overlapping. The line consists of six pieces, one after the other, to form a long and intertwined path\n\n** params has a default values for change is only from fx(params)\n\ntwitter: https://twitter.com/WSwetat\n[s]...save png",
            "tags": [
              "generative javascript p5js generativeart"
            ],
            "generatorUri": "ipfs://QmSVzFoQHBNdVxVpuPGXc8GD43N5r2d8LvLQ34rQHVfSx3",
            "artifactUri": "ipfs://QmSVzFoQHBNdVxVpuPGXc8GD43N5r2d8LvLQ34rQHVfSx3/?fxhash=ook2XSU9kHw35PSf4YDRcTftQmGTBjQARV88YHKdd38TSNDJCMg&fxminter=tz1QaqDst1HSnes5KP3tSjZVDaiWLFjbVpZv&fxparams=0800401800000000000040a6bc0000000000004014000000000000401800000000000007",
            "displayUri": "ipfs://Qmbpozm4wYbRkJvVywCTHHsnSzw7RRUwqLTpu4xzEEJya6",
            "thumbnailUri": "ipfs://QmPdXim5j23iChpZVgJbKmFjnSF39eiCPy6KvvVxrJBYnT",
            "authenticityHash": "9fc943d6964164b43d0d52e1a73efb2ed198ad52d5231802e402ccaee80a208d",
            "attributes": [
              {
                "name": "size relative to the screen **",
                "value": "9:16"
              },
              {
                "name": "style",
                "value": "style 1"
              },
              {
                "name": "number of blocks to draw on row",
                "value": 6
              },
              {
                "name": "number of blocks to draw on canvas",
                "value": 2910
              },
              {
                "name": "color pallet category name",
                "value": "Pastel"
              },
              {
                "name": "colors array",
                "value": 5
              },
              {
                "name": "sub color pallets to include on shape **",
                "value": 6
              },
              {
                "name": "sub color pallets change every **",
                "value": "200"
              },
              {
                "name": "**",
                "value": "only for fx(params)"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969802,
            "version": 1,
            "price": 2000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1QaqDst1HSnes5KP3tSjZVDaiWLFjbVpZv",
            "name": "Syncopa",
            "flag": "NONE",
            "avatarUri": "ipfs://QmNQDibQcxmeerEgk9hQWBYwNsjfdJyUzXtX1MMHswoHXE",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "pathFlow v2",
            "author": {
              "id": "tz1KedwSM1ehLwTwXWaTmifmz6SXrRBQcHBw",
              "name": "Ves M S",
              "type": "REGULAR",
              "avatarUri": "ipfs://Qmd8ZTkkLWyHtxjkLRmTLfGV61NHEJ6rwRreFXpTnZ5YsX",
              "flag": "NONE",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969801,
        "version": 1,
        "price": 2500000,
        "objkt": {
          "id": "FX1-49190",
          "version": 2,
          "name": "pathFlow v2 #78",
          "slug": "pathflow-v2-78",
          "metadata": {
            "name": "pathFlow v2 #78",
            "iterationHash": "onyet7BH3dCtQSDQ3mMQSqAjs6KTJN39oJwZeDKtqvvLu18dU3S",
            "description": "created using p5.js\n\n\nTwisted path with changing colors and overlapping. The line consists of six pieces, one after the other, to form a long and intertwined path\n\n** params has a default values for change is only from fx(params)\n\ntwitter: https://twitter.com/WSwetat\n[s]...save png",
            "tags": [
              "generative javascript p5js generativeart"
            ],
            "generatorUri": "ipfs://QmSVzFoQHBNdVxVpuPGXc8GD43N5r2d8LvLQ34rQHVfSx3",
            "artifactUri": "ipfs://QmSVzFoQHBNdVxVpuPGXc8GD43N5r2d8LvLQ34rQHVfSx3/?fxhash=onyet7BH3dCtQSDQ3mMQSqAjs6KTJN39oJwZeDKtqvvLu18dU3S&fxminter=tz1QaqDst1HSnes5KP3tSjZVDaiWLFjbVpZv&fxparams=0501402400000000000040ad540000000000034010000000000000401400000000000001",
            "displayUri": "ipfs://QmPA9UyzdJLtx3mAgrPhSmzMPbJASkL48TrNmdyfpPiAhZ",
            "thumbnailUri": "ipfs://QmfYZBjRypZftx1XaGvWFzcL4ow8sMsvcCSZHFidRefDUZ",
            "authenticityHash": "bb3436ebd8168c9320f7a7bf9feee421d107996988133a1ca7750f85a3dd7d66",
            "attributes": [
              {
                "name": "size relative to the screen **",
                "value": "3.5:2.5"
              },
              {
                "name": "style",
                "value": "style 2"
              },
              {
                "name": "number of blocks to draw on row",
                "value": 10
              },
              {
                "name": "number of blocks to draw on canvas",
                "value": 3754
              },
              {
                "name": "color pallet category name",
                "value": "Neon"
              },
              {
                "name": "colors array",
                "value": 4
              },
              {
                "name": "sub color pallets to include on shape **",
                "value": 5
              },
              {
                "name": "sub color pallets change every **",
                "value": "1"
              },
              {
                "name": "**",
                "value": "only for fx(params)"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969801,
            "version": 1,
            "price": 2500000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1QaqDst1HSnes5KP3tSjZVDaiWLFjbVpZv",
            "name": "Syncopa",
            "flag": "NONE",
            "avatarUri": "ipfs://QmNQDibQcxmeerEgk9hQWBYwNsjfdJyUzXtX1MMHswoHXE",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "pathFlow v2",
            "author": {
              "id": "tz1KedwSM1ehLwTwXWaTmifmz6SXrRBQcHBw",
              "name": "Ves M S",
              "type": "REGULAR",
              "avatarUri": "ipfs://Qmd8ZTkkLWyHtxjkLRmTLfGV61NHEJ6rwRreFXpTnZ5YsX",
              "flag": "NONE",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969800,
        "version": 1,
        "price": 19000000,
        "objkt": {
          "id": "FX1-49047",
          "version": 2,
          "name": "Blockchain Automaton #371",
          "slug": "blockchain-automaton-371",
          "metadata": {
            "name": "Blockchain Automaton #371",
            "iterationHash": "opZE16at2hUpXyiMtWQfMxmqztoGhGm4qqzQmYxtEHr4EEG8gxn",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=opZE16at2hUpXyiMtWQfMxmqztoGhGm4qqzQmYxtEHr4EEG8gxn&fxminter=tz1i5an8x73htBgXhKn56nJg4jdfAQs6BtbW",
            "displayUri": "ipfs://QmcL9tae5Npf66qKQxorZDBoY8LWeJDFcSECF7fGjqpVNS",
            "thumbnailUri": "ipfs://QmRe2DNTXqCrWdGprTKATZ7H8twrGTBEHyGzwtAB7dHL1o",
            "authenticityHash": "35a44b564f9d9fef89befb9d4d33a250a8f61ce0fff1b5280f06dd8ffdc7b62f",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 1
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969800,
            "version": 1,
            "price": 19000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1gFDzQmSEcozYtp37gWwd1tCRvVKVTaYP6",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969799,
        "version": 1,
        "price": 20000000,
        "objkt": {
          "id": "FX1-48918",
          "version": 2,
          "name": "Blockchain Automaton #254",
          "slug": "blockchain-automaton-254",
          "metadata": {
            "name": "Blockchain Automaton #254",
            "iterationHash": "op2ABzryyPVkWMaEKQE2fmpFBHJrpKmCsQZpy7Y6pCffpjDUayS",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=op2ABzryyPVkWMaEKQE2fmpFBHJrpKmCsQZpy7Y6pCffpjDUayS&fxminter=tz1KmUpEdof2zCFQ4UdeXv8URLZdjrYw7Dbd",
            "displayUri": "ipfs://QmUiB7R6nuYNuHg6w5fXAcpuzoFAJfu7CYMJLPThJ5r4dz",
            "thumbnailUri": "ipfs://Qmf31F92E9t5hqRJBmAcHGz7NgRsoZsnoQjmLhDobfteKY",
            "authenticityHash": "2928d722c0591a0841a5522501547ed66c72a38acc74174f952fde9f40342748",
            "attributes": [
              {
                "name": "mode",
                "value": "Vertical"
              },
              {
                "name": "palette",
                "value": 9
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969799,
            "version": 1,
            "price": 20000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1PJatVH2bYTfJyKzarxcVx9YbzTW3uo2pD",
            "name": "metacharsiu.tez",
            "flag": "NONE",
            "avatarUri": "ipfs://QmbJRSoJGcoSuNG2cxYeuCfkjWyHt5omwg7r5SYqphHaec",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969798,
        "version": 1,
        "price": 10000000,
        "objkt": {
          "id": "FX1-49695",
          "version": 2,
          "name": "Peristyle #59",
          "slug": "peristyle-59",
          "metadata": {
            "name": "Peristyle #59",
            "iterationHash": "ooRxtpp8AxQj12adgxadBggKsqQdrY7o5YEggdhRvXpRkiVz4ey",
            "description": "\"Peristyle\" is an artistic collection that draws its essence from abstraction and minimalism,\nand represents the concretization of an idea imagined several years ago.\nIt juxtaposes simple forms, borrowing pigments from classical painting.\n\nThe stratifications of colors which compose it create a set of geometrical rules,\nforming an infinite labyrinth in perpetual movement.\nThis work offers changing perspectives that are revealed and dissolved in turn,\ninviting us to constantly discover new paths.\n\nLike cities or individuals constantly reinventing themselves to face the difficulties of the future,\n\"Peristyle\" embodies this dynamic of perpetual transformation.\nIt plunges us into a universe where perspectives change,\nwhere new horizons are revealed while others dissipate.\n\nShortcuts : [click] Morf, [p] Print png.",
            "tags": [
              "p5.js",
              "binary",
              "generative",
              "Optical art",
              "geometric",
              "abstraction",
              "hypnotic",
              "mashrabiyas",
              "isosceles triangle"
            ],
            "generatorUri": "ipfs://QmQp4uWp2Duiz4mzYf2P2gTv9pyy4EUFyAF6AD4M5Y2Kw6",
            "artifactUri": "ipfs://QmQp4uWp2Duiz4mzYf2P2gTv9pyy4EUFyAF6AD4M5Y2Kw6/?fxhash=ooRxtpp8AxQj12adgxadBggKsqQdrY7o5YEggdhRvXpRkiVz4ey&fxminter=tz1RFxnC5SKy9nTt3X8n35MTkRGt5wfq6DtH&fxparams=090909401c0000000000000100010101000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040590000000000000000000000000000",
            "displayUri": "ipfs://QmfN3kwmPnyZWRfjfWmgm5zpZTzJE6DNxYCMDfCACM5g6u",
            "thumbnailUri": "ipfs://QmfF1M9W5WZDWAD6fsAZZEDA81fZS5hoAgaHC9R6B3JW74",
            "authenticityHash": "4405c979a7754edfa64cd59d6bb773dfe086b56284039e748972e46b170d4754",
            "attributes": [
              {
                "name": "first pigment",
                "value": "PR102"
              },
              {
                "name": "second pigment",
                "value": "PR102"
              },
              {
                "name": "third pigment",
                "value": "PR102"
              },
              {
                "name": "pigment mix",
                "value": "no mix"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969798,
            "version": 1,
            "price": 10000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1RFxnC5SKy9nTt3X8n35MTkRGt5wfq6DtH",
            "name": "System23",
            "flag": "NONE",
            "avatarUri": "ipfs://QmUqGsEgxi4WLUhSiNtnMQKztsd31zjBPf7mw8ySqu7S4e",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Peristyle",
            "author": {
              "id": "tz2WNJJVT8FZCLNQVe2D9RVJgCfogoiAoBhi",
              "name": "sha22.art",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmaPHJxrhQxPv7P9yfaYNKELTmEGJZvZJptWo6r6LPiLLk",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969797,
        "version": 1,
        "price": 12210000,
        "objkt": {
          "id": "FX0-446767",
          "version": 0,
          "name": "Isofrag generator series III #67",
          "slug": "isofrag-generator-series-iii-67",
          "metadata": {
            "name": "Isofrag generator series III #67",
            "iterationHash": "ookoABaGLEk9TVHQ4FvzUqrzq2x8mmReJqfWCavVkPjuxLwsUzS",
            "description": "Generative geometry by Frederik Vanhoutte, @wblut\nA unique generator giving a 100x100x100 glimpse into the isoverse\n\nThis place is a message... and part of a system of messages... pay attention to it!\nSending this message was important to us. We considered ourselves to be a powerful culture.\nThis place is not a place of honor... no highly esteemed deed is commemorated here... nothing valued is here.\nWhat is here was dangerous and repulsive to us. This message is a warning about danger.\nThe danger is in a particular location... it increases towards a center... the center of danger is here... of a particular size and shape, and below us.\nThe danger is still present, in your time, as it was in ours.\nThe danger is to the body, and it can kill.\nThe form of the danger is an emanation of energy.\nThe danger is unleashed only if you substantially disturb this place physically. This place is best shunned and left uninhabited.",
            "tags": [
              "Generative geometry",
              "@wblut"
            ],
            "generatorUri": "ipfs://QmbgAw3huBsPAET1kr25yzoXPKkoQSw4d7JFEACtbQ6qiX",
            "artifactUri": "ipfs://QmbgAw3huBsPAET1kr25yzoXPKkoQSw4d7JFEACtbQ6qiX?fxhash=ookoABaGLEk9TVHQ4FvzUqrzq2x8mmReJqfWCavVkPjuxLwsUzS",
            "displayUri": "ipfs://QmNU9VNaLzyPxg2HbeZQZk4jzERqCWbcvHxkW3ebiGemFa",
            "thumbnailUri": "ipfs://QmRfVqR9ZVM8nVUxwMb8D26kJYt6JVEgGCSTo6MJjDyFJp",
            "authenticityHash": "ffa188cd99aa13942f2075968587e3755d27ffd699e7973895cee6dc27c64aad",
            "attributes": [
              {
                "name": "Vault decay",
                "value": "low"
              },
              {
                "name": "Vault detailing",
                "value": "high"
              },
              {
                "name": "Vault modulation",
                "value": "2D"
              },
              {
                "name": "Light",
                "value": "XY"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969797,
            "version": 1,
            "price": 12210000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1QfHrDDxQsMcvfGJ4eFWCjwMeYXGjq1cu9",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Isofrag generator series III",
            "author": {
              "id": "tz1TSWEDs9wcBx2KiRzVzyzECsNpRiZaLJ1D",
              "name": "wblut",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmYGnvJBF3LJVMvNwkJL23KhjUWZ9gg2DGs8uRxJ7Lycjn",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969796,
        "version": 1,
        "price": 42000000,
        "objkt": {
          "id": "FX0-1488578",
          "version": 1,
          "name": "Florilegium #20",
          "slug": "florilegium-20",
          "metadata": {
            "name": "Florilegium #20",
            "iterationHash": "opLnayFgHzJLLA6QAXaLbiMo3ejJQSUkFRWG2VGqGq4qmFh7qww",
            "description": "Florilegium’s inspiration lies in the ancient art of botanical illustration.\n\nHistorically, a florilegium was an anthology of illustrations depicting exotic plants and creatures. These publications reached their peak in the 17th century, with notable examples such as Nehemiah Grew’s “Anatomy of Plants”, Ernst Haeckel’s “Kunstformen Der Natur” and Joseph Banks’ “Florilegium”. These publications have had a lasting impact on both science and art. Today, florilegia often document endangered plant species from specific locations or gardens and are among the most lavish and expensive of books to produce.\n\nIn this generative tribute to the ancient art of florilegia, imagined biomorphic forms compete for space in a garden based on the geometry of circles.\n\nGenerative artwork by AutoEclectus\n\nControls in live mode:\n- After the reveal animation finishes, press [s] to save a png (4000 x 5000px)\n\n@autoeclectus everywhere - Twitter, Instagram and Mastodon\nhttps://autoeclectus.art\n\n© AutoEclectus - NFT License Version 2.0 - January 2023",
            "tags": [
              "biomorphic",
              "florilegium",
              "organic",
              "svgjs",
              "javascript",
              "js",
              "autoeclectus"
            ],
            "generatorUri": "ipfs://QmNfYmn4pZrYUA1fVcvePXBFtgMqGms2UQEy8o9d5bfREC",
            "artifactUri": "ipfs://QmNfYmn4pZrYUA1fVcvePXBFtgMqGms2UQEy8o9d5bfREC?fxhash=opLnayFgHzJLLA6QAXaLbiMo3ejJQSUkFRWG2VGqGq4qmFh7qww",
            "displayUri": "ipfs://QmYbgvd5i71T5ZmGRzvWVnS3oDM28vLP2N9XCDPr7dLbBN",
            "thumbnailUri": "ipfs://Qmbed4FmR3FDPZGBbwYHRks6vr7GCi9C8pgvbmy7JPMKu4",
            "authenticityHash": "f4652c222ddf3c82afe401b26dcf5d240dd76a55fbdfed156cd08aeda582fe0c",
            "attributes": [
              {
                "name": "Palette",
                "value": "Piccadilly /  Cloud Dancer"
              },
              {
                "name": "Background",
                "value": "Dot Grid"
              },
              {
                "name": "Composition",
                "value": "Medium"
              },
              {
                "name": "Species Set",
                "value": "All"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969796,
            "version": 1,
            "price": 42000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1V9sRCDaG3fkEGgTJZKAbCspJGpEQn5hRG",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Florilegium",
            "author": {
              "id": "tz1RzomQhc8ttSFR7LgsaFxMpwVBCUpWqRYe",
              "name": "AutoEclectus",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmUZDUNmNVdn4fWR8VyRfctFyo5mHuZvEH4TmVBDVjwiDe",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969795,
        "version": 1,
        "price": 2000000,
        "objkt": {
          "id": "FX1-49700",
          "version": 2,
          "name": "Peristyle #61",
          "slug": "peristyle-61",
          "metadata": {
            "name": "Peristyle #61",
            "iterationHash": "ooS6ig9A4r24YBXrrnAUbN6XUSiXUts63RoiRtareR8ZBTEkEdK",
            "description": "\"Peristyle\" is an artistic collection that draws its essence from abstraction and minimalism,\nand represents the concretization of an idea imagined several years ago.\nIt juxtaposes simple forms, borrowing pigments from classical painting.\n\nThe stratifications of colors which compose it create a set of geometrical rules,\nforming an infinite labyrinth in perpetual movement.\nThis work offers changing perspectives that are revealed and dissolved in turn,\ninviting us to constantly discover new paths.\n\nLike cities or individuals constantly reinventing themselves to face the difficulties of the future,\n\"Peristyle\" embodies this dynamic of perpetual transformation.\nIt plunges us into a universe where perspectives change,\nwhere new horizons are revealed while others dissipate.\n\nShortcuts : [click] Morf, [p] Print png.",
            "tags": [
              "p5.js",
              "binary",
              "generative",
              "Optical art",
              "geometric",
              "abstraction",
              "hypnotic",
              "mashrabiyas",
              "isosceles triangle"
            ],
            "generatorUri": "ipfs://QmQp4uWp2Duiz4mzYf2P2gTv9pyy4EUFyAF6AD4M5Y2Kw6",
            "artifactUri": "ipfs://QmQp4uWp2Duiz4mzYf2P2gTv9pyy4EUFyAF6AD4M5Y2Kw6/?fxhash=ooS6ig9A4r24YBXrrnAUbN6XUSiXUts63RoiRtareR8ZBTEkEdK&fxminter=tz1RFxnC5SKy9nTt3X8n35MTkRGt5wfq6DtH&fxparams=110f113ff00000000000000100010000010100000000000000004059000000000000000000000000000040590000000000000000000000000000405900000000000000000000000000004059000000000000",
            "displayUri": "ipfs://QmRMhABGwWRchrHT94HSdEoN8ASKCMraYZR1zff7TDi9x6",
            "thumbnailUri": "ipfs://QmaW27vNkcb6MZHMfho65D7E98BMce5JnNts74N3gejv8K",
            "authenticityHash": "3be0185d8506b735e97db342bfaf99992835d18ead6187ba7474076eaabe92d9",
            "attributes": [
              {
                "name": "first pigment",
                "value": "PW6"
              },
              {
                "name": "second pigment",
                "value": "PBr7"
              },
              {
                "name": "third pigment",
                "value": "PW6"
              },
              {
                "name": "pigment mix",
                "value": "mix"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969795,
            "version": 1,
            "price": 2000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1RFxnC5SKy9nTt3X8n35MTkRGt5wfq6DtH",
            "name": "System23",
            "flag": "NONE",
            "avatarUri": "ipfs://QmUqGsEgxi4WLUhSiNtnMQKztsd31zjBPf7mw8ySqu7S4e",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Peristyle",
            "author": {
              "id": "tz2WNJJVT8FZCLNQVe2D9RVJgCfogoiAoBhi",
              "name": "sha22.art",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmaPHJxrhQxPv7P9yfaYNKELTmEGJZvZJptWo6r6LPiLLk",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969794,
        "version": 1,
        "price": 14000000,
        "objkt": {
          "id": "FX1-49005",
          "version": 2,
          "name": "Blockchain Automaton #333",
          "slug": "blockchain-automaton-333",
          "metadata": {
            "name": "Blockchain Automaton #333",
            "iterationHash": "ooiLSvQ8z5AK3DVNfh6SGFxXB4kia2NAEqZPMZa5ubvaDprtVk9",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=ooiLSvQ8z5AK3DVNfh6SGFxXB4kia2NAEqZPMZa5ubvaDprtVk9&fxminter=tz1KyHiUJD7WRsFHTHEy9sXXn7rXxNCSVTFY",
            "displayUri": "ipfs://QmR6bghx81uJhJG4c2Vdf1ZyZtkiU85yurnj8A2Buy2jZZ",
            "thumbnailUri": "ipfs://QmcAThsksDxqiukDZ2LV4jUH1ootbKQkw2NBfUfkrhs3zU",
            "authenticityHash": "62ee754d45c50a37dac6d7406423298b8f18cc45db83132f9cd04233bc4f0eb1",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 12
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969794,
            "version": 1,
            "price": 14000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1KyHiUJD7WRsFHTHEy9sXXn7rXxNCSVTFY",
            "name": "Gastino",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969793,
        "version": 1,
        "price": 20000000,
        "objkt": {
          "id": "FX1-48727",
          "version": 2,
          "name": "Blockchain Automaton #79",
          "slug": "blockchain-automaton-79",
          "metadata": {
            "name": "Blockchain Automaton #79",
            "iterationHash": "ooj5C1mXyjNRrLFVaREs9gtE7EsdbGTzXx5AixwRk5ZpWyFQjwU",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=ooj5C1mXyjNRrLFVaREs9gtE7EsdbGTzXx5AixwRk5ZpWyFQjwU&fxminter=tz1WkxjmmnzpAb3XWsULZu5YHPSArWrjWAam",
            "displayUri": "ipfs://QmSGNCCX7VcApPqrCvrUdyaNJffX8mnWczYVWK6LtaLFyM",
            "thumbnailUri": "ipfs://QmVoqBNx6zxWHK2JkSzX92mSVx7aS8mBhwz2BtkJqfVMG9",
            "authenticityHash": "5c6b6c90ca30a5b02764a20112a8a32b3e1817908147ee41a5c77a183d271f3d",
            "attributes": [
              {
                "name": "mode",
                "value": "Vertical"
              },
              {
                "name": "palette",
                "value": 1
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969793,
            "version": 1,
            "price": 20000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1WkxjmmnzpAb3XWsULZu5YHPSArWrjWAam",
            "name": "jWAam",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969792,
        "version": 1,
        "price": 25000000,
        "objkt": {
          "id": "FX1-48764",
          "version": 2,
          "name": "Blockchain Automaton #114",
          "slug": "blockchain-automaton-114",
          "metadata": {
            "name": "Blockchain Automaton #114",
            "iterationHash": "opW53VUanWP1NPuoiXiCRVQKYYdMBLeAvznwFpyFoXsyDzv2s1G",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=opW53VUanWP1NPuoiXiCRVQKYYdMBLeAvznwFpyFoXsyDzv2s1G&fxminter=tz1bYm35T9eTnsG936w42SeMahyUYefFDQDm",
            "displayUri": "ipfs://QmeFmhvwSAZTEMEk7ynEuqyxrTmibtCQ8qPHejGmQxj4RB",
            "thumbnailUri": "ipfs://QmUE9TpiYmjNX38vfTx4s6ze4EG8DoqiRzBcynUY1joGAC",
            "authenticityHash": "94cf5560748b80e5070cd73c22216c8660efc710e164f0da654d2cc85929792f",
            "attributes": [
              {
                "name": "mode",
                "value": "Vertical"
              },
              {
                "name": "palette",
                "value": 16
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969792,
            "version": 1,
            "price": 25000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1bYm35T9eTnsG936w42SeMahyUYefFDQDm",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969791,
        "version": 1,
        "price": 50000000,
        "objkt": {
          "id": "FX1-48769",
          "version": 2,
          "name": "Blockchain Automaton #119",
          "slug": "blockchain-automaton-119",
          "metadata": {
            "name": "Blockchain Automaton #119",
            "iterationHash": "onhey1d4iMzc6WVSbBDWf6KKyPCnmNiaDeYW6392n5yctkmdLQe",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=onhey1d4iMzc6WVSbBDWf6KKyPCnmNiaDeYW6392n5yctkmdLQe&fxminter=tz1UB3ya7RN1kjW6aDs9LVK4EbDyV2PkHRe7",
            "displayUri": "ipfs://QmbkpTsLgFk1zgQLq6DdGZycvdj45kdmCavMTZuUexPXW4",
            "thumbnailUri": "ipfs://QmZH9EG1mj8opEpBELuHf4UucDduBZ8ndvdJ64ZhevZneR",
            "authenticityHash": "e53501e46580b9a47d854d3b974bdfd7ad1d1a20617a018638f2ee73e0d65492",
            "attributes": [
              {
                "name": "mode",
                "value": "Diagonal"
              },
              {
                "name": "palette",
                "value": 6
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969791,
            "version": 1,
            "price": 50000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1UB3ya7RN1kjW6aDs9LVK4EbDyV2PkHRe7",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969790,
        "version": 1,
        "price": 28000000,
        "objkt": {
          "id": "FX1-49086",
          "version": 2,
          "name": "Blockchain Automaton #404",
          "slug": "blockchain-automaton-404",
          "metadata": {
            "name": "Blockchain Automaton #404",
            "iterationHash": "oodUQfARZJpBCdRfMHKLBx1M1Fuh7G9UW9g2UihmLFDy6aDUcs9",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=oodUQfARZJpBCdRfMHKLBx1M1Fuh7G9UW9g2UihmLFDy6aDUcs9&fxminter=tz1PmaJp4pLEm2iULo1QbuNKxopLY9faCHYc",
            "displayUri": "ipfs://QmctaEWYgUPstGht4AREFnDqbFrdv1r9rmJrbUF7guJP7D",
            "thumbnailUri": "ipfs://QmYqaGc5DeKzb5hkmcHT1DwCmQekdE2NhvS3iUMFvhbK3P",
            "authenticityHash": "2d5d6848964b2227afa4ad9917d44cc4258cdcb461fd6d32c38f60233d833994",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 1
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969790,
            "version": 1,
            "price": 28000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1RT94jREafiHzgtmkKbiVnDynriUYEi62D",
            "name": "Arthur Black",
            "flag": "NONE",
            "avatarUri": "ipfs://QmZmAAVh2AjQkn3Fm5sEkiW5yxCfaKpb9bxc6K3VA856T3",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969789,
        "version": 1,
        "price": 20000000,
        "objkt": {
          "id": "FX1-49139",
          "version": 2,
          "name": "Blockchain Automaton #452",
          "slug": "blockchain-automaton-452",
          "metadata": {
            "name": "Blockchain Automaton #452",
            "iterationHash": "onpLHyXoQrHh862ErEJp8mmhqUGjjnYaRbTchaaTMNwTR7oyQSK",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=onpLHyXoQrHh862ErEJp8mmhqUGjjnYaRbTchaaTMNwTR7oyQSK&fxminter=tz1V6Uz6BKcbhBdwdh5uPmJMNaFx4cdJ6qhA",
            "displayUri": "ipfs://QmWptPqberHmJWWR29qYLo7nb28mu4N2tgNT4coPpa9M4Q",
            "thumbnailUri": "ipfs://QmbGoLnhwMx8ErsaY7QcvAeKsGSC7XvcbkT6wBAMZbGHVL",
            "authenticityHash": "f12e5e2eceb506f045ce91c5e8e65fd59068ffde3fc104acafef5f9c4fe55ffe",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 14
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969789,
            "version": 1,
            "price": 20000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1V6Uz6BKcbhBdwdh5uPmJMNaFx4cdJ6qhA",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969788,
        "version": 1,
        "price": 18180000,
        "objkt": {
          "id": "FX1-9514",
          "version": 2,
          "name": "Pigments #8",
          "slug": "pigments-8",
          "metadata": {
            "name": "Pigments #8",
            "iterationHash": "onorKMaLkRwGfrKULJG19VNuUQLa67JbbijmtLgN4zptQULkUsX",
            "description": "“Pigments” is a generative art project that explores the beauty of optical color blending and the power of noise. \n\nAt the heart of this work is a random composition of rectangles that are made up of dots. These pigments are arranged in multiple layers, each layer using a different color from one of the carefully curated color palettes. Each palette consists of three to five colors. \n\nAs the pigments are shifted by random noise, new hues and patterns emerge, creating a lovely display of color and movement.\n\nIn live mode:\n- Press [1]-[5] to change the resolution.\n- Press [s] to save a png file at the current resolution.\n\nThis is my first generative art project. Created with p5js.\n\n________\n\nLooks best on high-resolution screens and viewed in live mode. When displayed on a low-resolution screen, an unintended moiré pattern may appear.",
            "tags": [
              "abstract",
              "pointillism",
              "minimalism",
              "color",
              "pigments",
              "generative",
              "p5js"
            ],
            "generatorUri": "ipfs://QmS5dr1RGa4vQSqjb7VQRmXMwjPHM7XeeHG6iKtC7DNbCY",
            "artifactUri": "ipfs://QmS5dr1RGa4vQSqjb7VQRmXMwjPHM7XeeHG6iKtC7DNbCY/?fxhash=onorKMaLkRwGfrKULJG19VNuUQLa67JbbijmtLgN4zptQULkUsX",
            "displayUri": "ipfs://QmSPDeJWstNTCdTKrW2bmidHkDk6LVCiZ4NwEpxWjd9sLH",
            "thumbnailUri": "ipfs://QmbdWGWjTbAEqPHGaUHozUknCFS9QKsiGMeR5pj9TH5Mef",
            "authenticityHash": "448c79add3547dd26236abe37af86ca0937d4270fa15db1d3634731b355f0729",
            "attributes": [
              {
                "name": "palette",
                "value": "pigments"
              },
              {
                "name": "tile size",
                "value": "normal"
              },
              {
                "name": "tile types",
                "value": "mixed"
              },
              {
                "name": "aspect ratio",
                "value": "4:5"
              },
              {
                "name": "border",
                "value": "big"
              },
              {
                "name": "spacing",
                "value": "no overlap"
              },
              {
                "name": "stroke",
                "value": "true"
              },
              {
                "name": "flat",
                "value": "true"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969788,
            "version": 1,
            "price": 18180000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1P2pLm7YHu3t1WBZnsAGV9M8AKBb3PfNdz",
            "name": "R Jeremy",
            "flag": "NONE",
            "avatarUri": "ipfs://QmaKCSWkErp1bBZpNE7Uu7hGxHSiGN3VQFtuFv86HXHpdh",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Pigments",
            "author": {
              "id": "tz1e89sxNSzaWNrEKToMxoE6eD4A2J3wdo3L",
              "name": "R.T.Shepherd",
              "type": "REGULAR",
              "avatarUri": null,
              "flag": "NONE",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      }
    ]
  }
}
