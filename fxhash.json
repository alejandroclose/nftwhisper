{
  "data": {
    "listings": [
      {
        "id": 969492,
        "version": 1,
        "price": 19000000,
        "objkt": {
          "id": "FX1-48789",
          "version": 2,
          "name": "Blockchain Automaton #138",
          "slug": "blockchain-automaton-138",
          "metadata": {
            "name": "Blockchain Automaton #138",
            "iterationHash": "opHXPWmnBvuPgeWxm7U5dSvnERcNEJDnJZCrVm5oZDPdeacBr54",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=opHXPWmnBvuPgeWxm7U5dSvnERcNEJDnJZCrVm5oZDPdeacBr54&fxminter=tz1VK7vQHbgdqPs4PVnwReDhV6rfpPBqXqKP",
            "displayUri": "ipfs://QmYjis7By5faM4AocM3FAuoJunf58wZ935gVfVLAkeAbZ6",
            "thumbnailUri": "ipfs://Qme9ANmANjdp7DfYi53TansXty788TAaoqEJ3U6MWANcSM",
            "authenticityHash": "8ce11d3e1fab6b10d6db4037055d801a488ace71ba0c7bd6bae6286111e5c3fc",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 10
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969492,
            "version": 1,
            "price": 19000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1VK7vQHbgdqPs4PVnwReDhV6rfpPBqXqKP",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969491,
        "version": 1,
        "price": 16500000,
        "objkt": {
          "id": "FX1-48759",
          "version": 2,
          "name": "Blockchain Automaton #109",
          "slug": "blockchain-automaton-109",
          "metadata": {
            "name": "Blockchain Automaton #109",
            "iterationHash": "opKoYxxFmkbpsSEVrrQDtvRZ2kqNF3ZSkLRRPYCvpwnozaaDWNq",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=opKoYxxFmkbpsSEVrrQDtvRZ2kqNF3ZSkLRRPYCvpwnozaaDWNq&fxminter=tz1V9sCKFosrDPrFbThPce4JPzvg3dHzouvf",
            "displayUri": "ipfs://QmRqk4aPkcgHQMB3NqBGQpcSr6u7bXgzfieEn8zdrM3YxS",
            "thumbnailUri": "ipfs://Qmdrt7sZGY9JxrAZttsYviKaZ1ZpqMC2jBPctqwVhEW9Le",
            "authenticityHash": "e21bc000095151eec3250a78f17c78ae667164280e46892e7a5b60f78a602543",
            "attributes": [
              {
                "name": "mode",
                "value": "Vertical"
              },
              {
                "name": "palette",
                "value": 17
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969491,
            "version": 1,
            "price": 16500000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz29kBPKt2LwcjC7vSLichgD9zyJAF52Uous",
            "name": "poperbu",
            "flag": "VERIFIED",
            "avatarUri": "ipfs://QmcRFgfM1BmM2p8kX2JQai4KoKAVCSGCnoGBjdvcM8vgpw",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969490,
        "version": 1,
        "price": 2000000,
        "objkt": {
          "id": "FX1-49357",
          "version": 2,
          "name": "Escape #59",
          "slug": "escape-59-64b4a98a-d6b5-44a7-a02f-c815a63f5f6d",
          "metadata": {
            "name": "Escape #59",
            "iterationHash": "ooT73rPGsmEBVTxQT4GAo63MWkqDW1xd5cA8wRGgQnJTXPVf7ob",
            "description": "\"Escape\"\n\n\nSENNA\nJan, 2023",
            "tags": [
              "color",
              "abstract",
              "chaos",
              "p5js",
              "pixel",
              "Escape"
            ],
            "generatorUri": "ipfs://QmYUmBrGF8b3XzXfu27JTRYTPYX8DAnA5jrUy6q8fZTCJX",
            "artifactUri": "ipfs://QmYUmBrGF8b3XzXfu27JTRYTPYX8DAnA5jrUy6q8fZTCJX/?fxhash=ooT73rPGsmEBVTxQT4GAo63MWkqDW1xd5cA8wRGgQnJTXPVf7ob&fxminter=tz1ZqdghLzLt6D3FGBtN6CdgymAiD7Yc1nyn",
            "displayUri": "ipfs://QmUfEinEF7h8o9qgArXwjxYkNp2i78fGBQvBmPFNDX6ebU",
            "thumbnailUri": "ipfs://QmZP3QS5cNMbtkiVm6jfJgpJdDWqWCkanrnKbuTrTLDzFs",
            "authenticityHash": "ae39dc6d37e56b5bead247ea68316227d03fa0a9595c0a109da647e9e3ce3ac7",
            "attributes": true,
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969490,
            "version": 1,
            "price": 2000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1ZqdghLzLt6D3FGBtN6CdgymAiD7Yc1nyn",
            "name": "NftsRubim",
            "flag": "NONE",
            "avatarUri": "ipfs://QmXpfCVstyVahE4W7k47K4SVsA91syAzPB58y7WX3LvKiT",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Escape",
            "author": {
              "id": "tz1YZGeo2GtFibz8FfPW9ce1xtHKNBtK5drq",
              "name": "SENNA",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmRqgJUffNB7ZYqg8n1CpRAGZj95hUcVCUVh9dnidwMkpw",
              "flag": "NONE",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969489,
        "version": 1,
        "price": 150000000,
        "objkt": {
          "id": "FX1-48801",
          "version": 2,
          "name": "Blockchain Automaton #149",
          "slug": "blockchain-automaton-149",
          "metadata": {
            "name": "Blockchain Automaton #149",
            "iterationHash": "ooq6C7C8tEojQpKs9cFedzQiaQKXi96jGTtttGmmiw5KLap5wjU",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=ooq6C7C8tEojQpKs9cFedzQiaQKXi96jGTtttGmmiw5KLap5wjU&fxminter=tz1hvfkpf7HbnE1Rroi7JbyegVjZzu97Yqw6",
            "displayUri": "ipfs://QmZJRdUYuyxuC3shHDUjcFH1MLdUTgFByG7NrEPtoyEzdA",
            "thumbnailUri": "ipfs://QmRH9DNCTeotKhy5rKu1VmUDtXwJewz6NXPUg3kzi616Kj",
            "authenticityHash": "d01336849f9d6abbf7621312fbb2706d8ae6efee99ee3e5a92584c98ec5244bd",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 6
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969489,
            "version": 1,
            "price": 150000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1hvfkpf7HbnE1Rroi7JbyegVjZzu97Yqw6",
            "name": "NftBiker",
            "flag": "VERIFIED",
            "avatarUri": "ipfs://QmQAvhaeivtivEj8qxMjYVASq7UBmnkN1J22jH8ZpsBQAX",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969488,
        "version": 1,
        "price": 250000000,
        "objkt": {
          "id": "FX1-48917",
          "version": 2,
          "name": "Blockchain Automaton #253",
          "slug": "blockchain-automaton-253",
          "metadata": {
            "name": "Blockchain Automaton #253",
            "iterationHash": "onqXMQAVrt1RDLwZy9B5UAa4zWYvLHgf2RktayN5fRK94VUzQ2o",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=onqXMQAVrt1RDLwZy9B5UAa4zWYvLHgf2RktayN5fRK94VUzQ2o&fxminter=tz1NNJCiknQUowNe7ikYYEy1X6XTGaKbHxdn",
            "displayUri": "ipfs://QmY1gHkhkXJwwtaMtTi1HjuE5SrjgRopHUJzW8u1MwRZQE",
            "thumbnailUri": "ipfs://QmdmXDgEKWowe2e38Pp5NgqzjyHgGfYQNvNqhq7L2Hwk45",
            "authenticityHash": "3d2fec854e675f7cd5188ea630591777d0f91adf3a5208e1bee21ed0c5f476f9",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 10
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969488,
            "version": 1,
            "price": 250000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1hvfkpf7HbnE1Rroi7JbyegVjZzu97Yqw6",
            "name": "NftBiker",
            "flag": "VERIFIED",
            "avatarUri": "ipfs://QmQAvhaeivtivEj8qxMjYVASq7UBmnkN1J22jH8ZpsBQAX",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969487,
        "version": 1,
        "price": 300000000,
        "objkt": {
          "id": "FX1-48927",
          "version": 2,
          "name": "Blockchain Automaton #261",
          "slug": "blockchain-automaton-261",
          "metadata": {
            "name": "Blockchain Automaton #261",
            "iterationHash": "oo9JKBFk1FgSsCBNzRm5FNBwomDfvpyWRJWUZDHmkx5mdYosALZ",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=oo9JKBFk1FgSsCBNzRm5FNBwomDfvpyWRJWUZDHmkx5mdYosALZ&fxminter=tz1Vpfrg1QdEB2GgPgf4FoGAjNUaoxs7HbqU",
            "displayUri": "ipfs://QmQiF5s9HaCsQaZbYR98JjhrPX2jzWFvtiacDky6hMEEhh",
            "thumbnailUri": "ipfs://Qmdx9u74urTJL2MpDhiBCoavRHUZ2WakzZjZpnmqiih4UV",
            "authenticityHash": "1fe19a121772b7f0e27ba4da7a46a83ac5d17f1147cce754d5c7adf8182679fa",
            "attributes": [
              {
                "name": "mode",
                "value": "Diagonal"
              },
              {
                "name": "palette",
                "value": 9
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969487,
            "version": 1,
            "price": 300000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1hvfkpf7HbnE1Rroi7JbyegVjZzu97Yqw6",
            "name": "NftBiker",
            "flag": "VERIFIED",
            "avatarUri": "ipfs://QmQAvhaeivtivEj8qxMjYVASq7UBmnkN1J22jH8ZpsBQAX",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969486,
        "version": 1,
        "price": 24000000,
        "objkt": {
          "id": "FX1-48948",
          "version": 2,
          "name": "Blockchain Automaton #282",
          "slug": "blockchain-automaton-282",
          "metadata": {
            "name": "Blockchain Automaton #282",
            "iterationHash": "ont5NfQ2Kq9BdSW7Rr8jNPa8Ah3Thu4ANuzpmTdo7624Xmh8Lrm",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=ont5NfQ2Kq9BdSW7Rr8jNPa8Ah3Thu4ANuzpmTdo7624Xmh8Lrm&fxminter=tz1WNkfTG9935zXV2UrFHN7DPzXGa1t2n7W1",
            "displayUri": "ipfs://QmNudjC1Tt3F7rYUWNEPZZxEXTkn6UzZZ7i3kNjcVqLy6v",
            "thumbnailUri": "ipfs://QmQmpjiN7HWuZdAvCuv8ezrSpSQLJU822X5m6RB1hrgqwC",
            "authenticityHash": "bdf581b7dbb2c84ad7068660857027004f1f91bec79627749c1dea6660d5cda7",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 7
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969486,
            "version": 1,
            "price": 24000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1WNkfTG9935zXV2UrFHN7DPzXGa1t2n7W1",
            "name": "Denver XlX",
            "flag": "NONE",
            "avatarUri": "ipfs://QmU93b8horJoSjZRFAUDH4JZ9YSK5YCELWtYeniVbrE4RY",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969485,
        "version": 1,
        "price": 300000000,
        "objkt": {
          "id": "FX1-48861",
          "version": 2,
          "name": "Blockchain Automaton #200",
          "slug": "blockchain-automaton-200",
          "metadata": {
            "name": "Blockchain Automaton #200",
            "iterationHash": "op5o3SVH5tjmPRq68dCmhYb6gLQHR3Be4UXVx6B8nFyVDiaUPwj",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=op5o3SVH5tjmPRq68dCmhYb6gLQHR3Be4UXVx6B8nFyVDiaUPwj&fxminter=tz1gffH1rsj44zsSUHq57d9gvCisaVDmdAqV",
            "displayUri": "ipfs://QmPgkrvR42igomSMJNBLFSHFHtNZtumwem9EJZf5m5PGQn",
            "thumbnailUri": "ipfs://QmXumGS6fzMNQrVM2PYG7YafC9cXq59J6Nnt95Tt1Tn7vq",
            "authenticityHash": "8bf1b9c92345c1d13e07c0d771ca341221d287196c57dfda80d3036bb95ebd5e",
            "attributes": [
              {
                "name": "mode",
                "value": "Diagonal"
              },
              {
                "name": "palette",
                "value": 17
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969485,
            "version": 1,
            "price": 300000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1hvfkpf7HbnE1Rroi7JbyegVjZzu97Yqw6",
            "name": "NftBiker",
            "flag": "VERIFIED",
            "avatarUri": "ipfs://QmQAvhaeivtivEj8qxMjYVASq7UBmnkN1J22jH8ZpsBQAX",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969483,
        "version": 1,
        "price": 30000000,
        "objkt": {
          "id": "FX1-49008",
          "version": 2,
          "name": "Blockchain Automaton #336",
          "slug": "blockchain-automaton-336",
          "metadata": {
            "name": "Blockchain Automaton #336",
            "iterationHash": "opWZXnqNifsLdfXBdo1KF11G2Y6yGNVSsqwNwQ2YTp7BVpLqtL7",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=opWZXnqNifsLdfXBdo1KF11G2Y6yGNVSsqwNwQ2YTp7BVpLqtL7&fxminter=tz1RQeTBaWuvF9tTkwSAKyyUwvuDkYvYTYZJ",
            "displayUri": "ipfs://QmauiJLxFxF21Gp9kN61p34qvsWzcHPGk4BRzShZ2XJ6rE",
            "thumbnailUri": "ipfs://QmSBXDh24RvFtMW8R73if4PhUP8tBMRMe8X8Uea6TeRTAm",
            "authenticityHash": "7532223131d8fadf64db6c487a70736f209854486b3f0e5d3610fc1462303652",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 15
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969483,
            "version": 1,
            "price": 30000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1PwWW4u7Za75dJPquycECdKojh4TpKEHfE",
            "name": "1000Landz",
            "flag": "NONE",
            "avatarUri": "ipfs://QmaNCWMXE3UtSHaxa6xXnGghJPKr1tSuYVrTg1mahZLQEE",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969482,
        "version": 1,
        "price": 34000000,
        "objkt": {
          "id": "FX1-49175",
          "version": 2,
          "name": "Blockchain Automaton #485",
          "slug": "blockchain-automaton-485",
          "metadata": {
            "name": "Blockchain Automaton #485",
            "iterationHash": "onjKhVT1yV9fuBYQRLQVtY9qu9LjsgcU2PYyMqr8dJkyiSU82zb",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=onjKhVT1yV9fuBYQRLQVtY9qu9LjsgcU2PYyMqr8dJkyiSU82zb&fxminter=tz1avbrn6uWhu4DxxURPm4aiGHa9SDUXpYK8",
            "displayUri": "ipfs://Qmf71MT11giuSvx1FbooZTfM7bUfgpsPvKUL98zii9byBs",
            "thumbnailUri": "ipfs://QmfQpocSMosyJPitjBbvoYZdgTyEcJ5qRqQoPybRKkPqau",
            "authenticityHash": "5ab41816a1b443d0493d275d572724ad583d3bd5e0bdbdc49092a20fbfc1ba1a",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 1
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969482,
            "version": 1,
            "price": 34000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1avbrn6uWhu4DxxURPm4aiGHa9SDUXpYK8",
            "name": "LiliAna",
            "flag": "NONE",
            "avatarUri": "ipfs://QmU2vdQBdNwycjkMzmwc7wnMUaKQZTJBWpGDQr84Xf5K5N",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969481,
        "version": 1,
        "price": 6900000,
        "objkt": {
          "id": "FX1-48470",
          "version": 2,
          "name": "pathFlow v2 #57",
          "slug": "pathflow-v2-57",
          "metadata": {
            "name": "pathFlow v2 #57",
            "iterationHash": "opHfBY1v8jaaB1L3GfkfWnQxBcZb9C4WonQKqbGvYnMLKGSzvgZ",
            "description": "created using p5.js\n\n\nTwisted path with changing colors and overlapping. The line consists of six pieces, one after the other, to form a long and intertwined path\n\n** params has a default values for change is only from fx(params)\n\ntwitter: https://twitter.com/WSwetat\n[s]...save png",
            "tags": [
              "generative javascript p5js generativeart"
            ],
            "generatorUri": "ipfs://QmSVzFoQHBNdVxVpuPGXc8GD43N5r2d8LvLQ34rQHVfSx3",
            "artifactUri": "ipfs://QmSVzFoQHBNdVxVpuPGXc8GD43N5r2d8LvLQ34rQHVfSx3/?fxhash=opHfBY1v8jaaB1L3GfkfWnQxBcZb9C4WonQKqbGvYnMLKGSzvgZ&fxminter=tz2LBpXnAQ9ZWuCoUUoeWEY8VD917P9GmyyT&fxparams=0500401400000000000040b3230000000000053ff00000000000003ff000000000000006",
            "displayUri": "ipfs://QmUg3EeQbsBTRBXXd7c9NrDvnQ8nUTqvJU2rvLkJ33ZQZi",
            "thumbnailUri": "ipfs://QmarsJdiD5S8UXH34KzHgWdnch8A1CiD17yc9EaibjsML1",
            "authenticityHash": "02984ba8b91656ad1ea0d4087155860107677f0cd1af9fd59a2d5d25dc83c6d3",
            "attributes": [
              {
                "name": "size relative to the screen **",
                "value": "3.5:2.5"
              },
              {
                "name": "style",
                "value": "style 1"
              },
              {
                "name": "number of blocks to draw on row",
                "value": 5
              },
              {
                "name": "number of blocks to draw on canvas",
                "value": 4899
              },
              {
                "name": "color pallet category name",
                "value": "Old"
              },
              {
                "name": "colors array",
                "value": 1
              },
              {
                "name": "sub color pallets to include on shape **",
                "value": 1
              },
              {
                "name": "sub color pallets change every **",
                "value": "100"
              },
              {
                "name": "**",
                "value": "only for fx(params)"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969481,
            "version": 1,
            "price": 6900000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz2LBpXnAQ9ZWuCoUUoeWEY8VD917P9GmyyT",
            "name": "Chinmi",
            "flag": "NONE",
            "avatarUri": "ipfs://Qmb4e2Zy2jEATtbxV2GQzWwexrQQCsB7n7gQ6UC7jM18x7",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "pathFlow v2",
            "author": {
              "id": "tz1KedwSM1ehLwTwXWaTmifmz6SXrRBQcHBw",
              "name": "Ves M S",
              "type": "REGULAR",
              "avatarUri": "ipfs://Qmd8ZTkkLWyHtxjkLRmTLfGV61NHEJ6rwRreFXpTnZ5YsX",
              "flag": "NONE",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969480,
        "version": 1,
        "price": 12000000,
        "objkt": {
          "id": "FX1-49330",
          "version": 2,
          "name": "Streaming #159",
          "slug": "streaming-159",
          "metadata": {
            "name": "Streaming #159",
            "iterationHash": "ooheJmiVeScBGpQJaQiw2Xk2L7DX4xinpEPzC9S8FPdE9cX1t4i",
            "description": "Streaming is an exploration of curl noise and rounding errors, using fx(params) to shape the piece.\n\nMy own method for producing pieces of interest is to randomise all parameters, then lock favourable aspects and experiment with altering one or two parameters. If the piece is too dark, reduce the render length or increase the stroke weight. If the piece seems too light, alter the volatility of the noise, or slow it down with increased friction. Each parameter can, of course, be explained in great detail, but in reality the best way to work with the piece is to play.\n\nThe random numbers for the piece are generated using the minter's address, meaning that what you see as a live preview will be the exact mint received.",
            "tags": [
              "fxparams",
              "params",
              "curl noise",
              "p5js",
              "rounding"
            ],
            "generatorUri": "ipfs://QmXTQkTafhk1CV5eS7Bn1kHRwWhjFc2468kwPSSfSwo7Cs",
            "artifactUri": "ipfs://QmXTQkTafhk1CV5eS7Bn1kHRwWhjFc2468kwPSSfSwo7Cs/?fxhash=ooheJmiVeScBGpQJaQiw2Xk2L7DX4xinpEPzC9S8FPdE9cX1t4i&fxminter=tz1PwWW4u7Za75dJPquycECdKojh4TpKEHfE&fxparams=04030202010101000000040003010201401800000000000001",
            "displayUri": "ipfs://QmWozTBrYVzeLSxXTN4EQXH5QaCiZvjiqB6wgNEyH6r4o8",
            "thumbnailUri": "ipfs://QmUPQP3R5piG2jTbVY368Yn5iqTRM5dnJLErn8HmKEg9KS",
            "authenticityHash": "4efbdf2680aa2aa6a8ac5525b28623de401ee1167dc02f987dcff50f12f6c508",
            "attributes": [
              {
                "name": "Grid type",
                "value": "RandomWeighted"
              },
              {
                "name": "Density",
                "value": "High"
              },
              {
                "name": "Stroke weight",
                "value": "Granulated"
              },
              {
                "name": "Render mode",
                "value": "Points"
              },
              {
                "name": "Aspect ratio",
                "value": "3:2"
              },
              {
                "name": "Background",
                "value": "Dark"
              },
              {
                "name": "Colour mode",
                "value": "Particolour"
              },
              {
                "name": "Render length",
                "value": "90 frames"
              },
              {
                "name": "Noise volatility",
                "value": "Rapid"
              },
              {
                "name": "Noise accuracy",
                "value": "Accurate"
              },
              {
                "name": "Noise variability",
                "value": "Normal"
              },
              {
                "name": "Noise friction",
                "value": "Scaled"
              },
              {
                "name": "Noise granularity",
                "value": 6
              },
              {
                "name": "Granularity ratio",
                "value": "Mostly granular"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969480,
            "version": 1,
            "price": 12000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1PwWW4u7Za75dJPquycECdKojh4TpKEHfE",
            "name": "1000Landz",
            "flag": "NONE",
            "avatarUri": "ipfs://QmaNCWMXE3UtSHaxa6xXnGghJPKr1tSuYVrTg1mahZLQEE",
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Streaming",
            "author": {
              "id": "tz1VjCS2jiBTVPSEoYzJ79KkbYV5QbFJxuf3",
              "name": "mandybrigwell",
              "type": "REGULAR",
              "avatarUri": "ipfs://Qme1qhZAHcqy5vEwAdPmX5jFw1hi6Ra6cXGjYTubTgtJ7c",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969479,
        "version": 1,
        "price": 14000000,
        "objkt": {
          "id": "FX1-49095",
          "version": 2,
          "name": "Blockchain Automaton #412",
          "slug": "blockchain-automaton-412",
          "metadata": {
            "name": "Blockchain Automaton #412",
            "iterationHash": "oo88ufMZkpTxrPxb32R5x1nq47AEckQziwZn3NdadQj9u4pmygX",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=oo88ufMZkpTxrPxb32R5x1nq47AEckQziwZn3NdadQj9u4pmygX&fxminter=tz1gbMAwJtWAe6rzGZsPiumETVGxDq1LghAy",
            "displayUri": "ipfs://QmXFSYzkCxqJZXZYUUXNrGSzPkAEggaohkXvJx2x6JkKAQ",
            "thumbnailUri": "ipfs://QmYUfs4szkoiCjS4iSyTLZMPSBiFpZ9oXeNrBaMN6c1Hiz",
            "authenticityHash": "bc17ad2c97bd24ea7a24067f9869f6b79438e7c53a31331182c2d68358fa8f3a",
            "attributes": [
              {
                "name": "mode",
                "value": "Vertical"
              },
              {
                "name": "palette",
                "value": 7
              },
              {
                "name": "size",
                "value": "32x32"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969479,
            "version": 1,
            "price": 14000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1gbMAwJtWAe6rzGZsPiumETVGxDq1LghAy",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969476,
        "version": 1,
        "price": 14000000,
        "objkt": {
          "id": "FX1-49142",
          "version": 2,
          "name": "Blockchain Automaton #455",
          "slug": "blockchain-automaton-455",
          "metadata": {
            "name": "Blockchain Automaton #455",
            "iterationHash": "onmGWgPR5HZVTZFPt7odfu2WVYbeKr2y647U1kAW98kKd5uk5pi",
            "description": "This experimental project involves an on-chain cellular automaton. The features and cellular automaton rules are derived from the minter's address. Being the first (unto my knowledge) project on fxhash that generates the artwork completely on chain, it seemed fitting to draw inspiration from one of the first projects on fxhash, \"RGB Elementary Cellular Automaton\".\n\nWhat is this?\n\nAn experimental generative token that integrates on-chain generation, and on-chain storage of the artwork. This is accomplished using a custom smart contract. The artwork is generated using the generate_on_chain entrypoint in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt, and the generated image is subsequently stored on-chain as a byte-string of pixels (row-major order) in the tokens bigmap in KT1GRFujk5m6feK7gJcqCU7ijJkFgx5JigEt.\n\nHow does this work?\n\nSmart contracts have a default entrypoint which is automatically called when XTZ is sent to the contract. By using a smart contract as the primary address, the default entrypoint will be called every time a token is minted. Of course, to prevent accounts from bypassing the fxhash contracts and sending XTZ directly to the smart contract, generating and storing the artwork on-chain, the smart contract checks that an fxhash contract is the account sending XTZ. In this smart contract, the default entrypoint immediately calls the generate_on_chain entrypoint for the sole purpose of making the generation process more apparent on indexers like tzkt.\n\nIn order to make this project compatible with fxhash, the artwork produced by the code submitted to fxhash must be identical to that which is produced by the generative algorithm within the smart contract. At the time of development, the minter's address is the only piece of information which is readily accessible via the fxhash snippet API and in the smart contract. As a result, each account can only generate a single unique artwork (this is enforced by the contract). In the future, this issue could be solved if the fxhash snippet API provided access to the iteration number, as the smart contract could also keep track of this information quite easily.\n\nConsequently, collectors who wish to collect more than one iteration must create additional accounts to mint. The tokens can then be subsequently transferred as per usual.\n\nWhy is the variations preview disabled?\n\nBecause the minter's address is the source of randomness for the generated artwork, not the hash provided by fxhash, changing the hash in the variations preview will have no effect. To see different variations of the artwork you need to modify the fxminter URL parameter in live preview mode.\n\nWhy does the mint button not work on the fxhash frontend?\n\nCurrently, the fxhash frontend has a default storage limit for mint operations that is less than what is required to store the generated image on chain. As a result, the mint button will fail on the fxhash frontend. To get around this, you can mint this token on a mini-website I created (https://blockchain-automaton.netlify.app/), or on Better Call Dev, or by injecting the transaction directly onto the blockchain.\n\nBut Why?\n\nBecause experimentation is fun.",
            "tags": [
              "onchain",
              "cellular automaton",
              "blockchain",
              "pixelart"
            ],
            "generatorUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y",
            "artifactUri": "ipfs://Qmeb7huzBQZ5KTo2qqc48Kg5GEumYDKbXMN9UQXkD5Zz5Y/?fxhash=onmGWgPR5HZVTZFPt7odfu2WVYbeKr2y647U1kAW98kKd5uk5pi&fxminter=tz1QCoSsTPLny7U4drzVQ2XD14rwSpjuSntJ",
            "displayUri": "ipfs://QmViPbtsmu3a6E43EBKUmvu6He5jt51dgqJH4h9j68zzym",
            "thumbnailUri": "ipfs://Qmb1qRHYXXqNvkaeCQwkAdjfjqeqtGNxGsTxVuKFJJzUjQ",
            "authenticityHash": "95c5c0484c4647b34456c20c0f713e1f4f5adb5f03fef7765049364aa6aa4164",
            "attributes": [
              {
                "name": "mode",
                "value": "Horizontal"
              },
              {
                "name": "palette",
                "value": 0
              },
              {
                "name": "size",
                "value": "16x16"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969476,
            "version": 1,
            "price": 14000000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1QCoSsTPLny7U4drzVQ2XD14rwSpjuSntJ",
            "name": null,
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Blockchain Automaton",
            "author": {
              "id": "tz1QvV3jVPWrJSdDy9ePZBnhGL8bAoQFFBPv",
              "name": "Extracurricular Activities",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmahpnFUbW9NWQjUzNLUxxYLszZC2eeNo5mmRPikJLYge5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969475,
        "version": 1,
        "price": 99990000,
        "objkt": {
          "id": "FX0-1582424",
          "version": 1,
          "name": "BLOCK PARTY #242",
          "slug": "block-party-242",
          "metadata": {
            "name": "BLOCK PARTY #242",
            "iterationHash": "oo4n689vwBPPFGN82QfceesrKz9yMwpmfeZTqEH8mobEk8V3tc2",
            "description": "A generative algorithm exploring isometric grids and recursive divisions with an emphasis on contrasting colors.\n\nA random rectange division is so simple yet creates vastly different and interesting outputs.\n\nAn isometric grid provides a unique perspective to the recursion giving each piece a certain depth and contrast.\n\nWhen does chaotic randomness become beauty and what interesting patterns may emerge?\n\nPress 's' in live mode to save image. Best viewed after save.\n\n* Original code by Matt Lehoullier with p5.js",
            "tags": [
              "Isometric",
              "Grid",
              "Recursion",
              "p5js"
            ],
            "generatorUri": "ipfs://QmRFUzbEG9cnd8VHfiBoXZzqCqJUN486vPAavABRky3rTo",
            "artifactUri": "ipfs://QmRFUzbEG9cnd8VHfiBoXZzqCqJUN486vPAavABRky3rTo?fxhash=oo4n689vwBPPFGN82QfceesrKz9yMwpmfeZTqEH8mobEk8V3tc2",
            "displayUri": "ipfs://QmW3NcKP5VJzCb99QVtBxwp1DjrQ2PB8NPMJNWugXVvu8k",
            "thumbnailUri": "ipfs://QmcXWVKAH9oDuvDd2kKfMWy6JeuR6FsATWcCQVduFsqBv9",
            "authenticityHash": "d3fa15d3a8c1154fba4eb25226f8574de1b4a58499dca47cbbb0819ca7294f6f",
            "attributes": [
              {
                "name": "Style",
                "value": "Mono"
              },
              {
                "name": "Palette",
                "value": "Trampoline"
              },
              {
                "name": "Size",
                "value": "Medium"
              },
              {
                "name": "Distribution",
                "value": "Uniform"
              },
              {
                "name": "Outline",
                "value": "Black"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969475,
            "version": 1,
            "price": 99990000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1UBTA5zR9NQrBgLVA8nnhzb1wyAYXuZyUz",
            "name": "bnell01",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "BLOCK PARTY",
            "author": {
              "id": "tz1SVaPKWhrdQCfN4F7ZjCVQL4kvTCf9Bd6P",
              "name": "Matt Lehoullier",
              "type": "REGULAR",
              "avatarUri": "ipfs://Qmdv7XMdEaqQ2VSpmRRh4KUNbeLuZKyUVmwEid3mEWVNV4",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969474,
        "version": 1,
        "price": 69690000,
        "objkt": {
          "id": "FX0-1582426",
          "version": 1,
          "name": "BLOCK PARTY #244",
          "slug": "block-party-244",
          "metadata": {
            "name": "BLOCK PARTY #244",
            "iterationHash": "opDrS6ugm6QLKPnjqaxDw8TyV3mkB5Uf4EWUyHXgKQwFYtDX4Rk",
            "description": "A generative algorithm exploring isometric grids and recursive divisions with an emphasis on contrasting colors.\n\nA random rectange division is so simple yet creates vastly different and interesting outputs.\n\nAn isometric grid provides a unique perspective to the recursion giving each piece a certain depth and contrast.\n\nWhen does chaotic randomness become beauty and what interesting patterns may emerge?\n\nPress 's' in live mode to save image. Best viewed after save.\n\n* Original code by Matt Lehoullier with p5.js",
            "tags": [
              "Isometric",
              "Grid",
              "Recursion",
              "p5js"
            ],
            "generatorUri": "ipfs://QmRFUzbEG9cnd8VHfiBoXZzqCqJUN486vPAavABRky3rTo",
            "artifactUri": "ipfs://QmRFUzbEG9cnd8VHfiBoXZzqCqJUN486vPAavABRky3rTo?fxhash=opDrS6ugm6QLKPnjqaxDw8TyV3mkB5Uf4EWUyHXgKQwFYtDX4Rk",
            "displayUri": "ipfs://QmQvQCSMKq7tDgKD7PwhN6tbBNA2fUkym8Do8ifjdzeVER",
            "thumbnailUri": "ipfs://QmWj14UufBJhCY35cgzQpL3FFrPYtrserzCFx2UZctLuXo",
            "authenticityHash": "6a384aa29ba5189928641d1da5dad3383f0439754ec6186d2c97392d00164b0b",
            "attributes": [
              {
                "name": "Style",
                "value": "Assorted"
              },
              {
                "name": "Palette",
                "value": "Adventure"
              },
              {
                "name": "Size",
                "value": "Small"
              },
              {
                "name": "Distribution",
                "value": "Uniform"
              },
              {
                "name": "Outline",
                "value": "Black"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969474,
            "version": 1,
            "price": 69690000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1UBTA5zR9NQrBgLVA8nnhzb1wyAYXuZyUz",
            "name": "bnell01",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "BLOCK PARTY",
            "author": {
              "id": "tz1SVaPKWhrdQCfN4F7ZjCVQL4kvTCf9Bd6P",
              "name": "Matt Lehoullier",
              "type": "REGULAR",
              "avatarUri": "ipfs://Qmdv7XMdEaqQ2VSpmRRh4KUNbeLuZKyUVmwEid3mEWVNV4",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969473,
        "version": 1,
        "price": 88880000,
        "objkt": {
          "id": "FX1-12300",
          "version": 2,
          "name": "Planetary #45",
          "slug": "planetary-45",
          "metadata": {
            "name": "Planetary #45",
            "iterationHash": "ooTPcWRqd1VM2haH7ZbnEZFG5Tp6M4S8mRRyZJyR7gTT6R6eM55",
            "description": "▪️ 42 Variables\n▪️ Features \n▪️▪️ Visual Style, System Name, Planet Name, Star Date, Planet Noise\n▪️▪️ Planet Ocean, Planet Coverage, Planet Rings, Orbital Prop\n▪️ [left mouse button] hold to rotate around [ Wide Camera ]\n▪️ [left mouse button double click] to reset the camera view [ Wide Camera ]\n▪️ [mouse scroll wheel] to zoom in and out [ Wide and Side Follow Camera ]\n▪️ [c] to switch between cameras [ Follow | Side Follow | Wide | Flythrough ]\n▪️ [a] to toggle the complete animation [ off by default ]\n▪️ [i] to toggle planet information popup [ off by default ]\n▪️ [p] to capture an image with current width and height [IPFS]\n▪️ [s] to open the image capture popup on the top right [IPFS]\n▪️▪️ On mobile tap top right of the screen to open the popup\n▪️ The piece does not stretch but instead it adjusts to the screen size and ratio\n▪️ Designed to have a strong visual impact so might not be suitable for mobile\n▪️ There's a little easter egg in the console ;)",
            "tags": [
              "interactive",
              "animated",
              "greyscale",
              "monochrome",
              "shapes",
              "edges",
              "strong",
              "black and white",
              "greyscale",
              "space",
              "planets",
              "planetary",
              "orbit",
              "sci-fi",
              "vectorz3r0"
            ],
            "generatorUri": "ipfs://QmV5AmvqfgMw1Addjz2SyXJpm3nZNKeSvWVjxRNW7AQQzU",
            "artifactUri": "ipfs://QmV5AmvqfgMw1Addjz2SyXJpm3nZNKeSvWVjxRNW7AQQzU/?fxhash=ooTPcWRqd1VM2haH7ZbnEZFG5Tp6M4S8mRRyZJyR7gTT6R6eM55",
            "displayUri": "ipfs://QmUiuXZno1wK4SjSafQvvadj9MhygZJETdKmckW3WxTZMq",
            "thumbnailUri": "ipfs://QmatTs8swe1CnSJvdbiYZLJdQFfYeqASrZGFrxQFmHfB6W",
            "authenticityHash": "a821fc0dd08e0d94a5a5ffc0ccc5dc158d0023476462b5a13c029719d4767cf8",
            "attributes": [
              {
                "name": "Visual Style",
                "value": "Bold"
              },
              {
                "name": "System Name",
                "value": "Rana Union"
              },
              {
                "name": "Planet Name",
                "value": "Ran-1621"
              },
              {
                "name": "Star Date",
                "value": "3111.08.04"
              },
              {
                "name": "Planet Noise",
                "value": "Fractal"
              },
              {
                "name": "Planet Extrusion",
                "value": "Inward"
              },
              {
                "name": "Planet Ocean",
                "value": "No"
              },
              {
                "name": "Planet Coverage",
                "value": "Shield"
              },
              {
                "name": "Planet Rings",
                "value": "None"
              },
              {
                "name": "Orbital Prop",
                "value": "Capsule"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969473,
            "version": 1,
            "price": 88880000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1UBTA5zR9NQrBgLVA8nnhzb1wyAYXuZyUz",
            "name": "bnell01",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Planetary",
            "author": {
              "id": "tz1SrA7UpvzPmxp6NymuzDzaRfxDSJaz6ebF",
              "name": "vectorz3r0",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmdeUpNJEedQGFHr73xrp1oNdV4X1mKaNuT5hoRoemJHp4",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969472,
        "version": 1,
        "price": 88880000,
        "objkt": {
          "id": "FX1-11993",
          "version": 2,
          "name": "Planetary #41",
          "slug": "planetary-41",
          "metadata": {
            "name": "Planetary #41",
            "iterationHash": "oo98R5iot9AYZWHiFqSuH67bCbWqDYK7zZbfW23nEkWQhwmGiFJ",
            "description": "▪️ 42 Variables\n▪️ Features \n▪️▪️ Visual Style, System Name, Planet Name, Star Date, Planet Noise\n▪️▪️ Planet Ocean, Planet Coverage, Planet Rings, Orbital Prop\n▪️ [left mouse button] hold to rotate around [ Wide Camera ]\n▪️ [left mouse button double click] to reset the camera view [ Wide Camera ]\n▪️ [mouse scroll wheel] to zoom in and out [ Wide and Side Follow Camera ]\n▪️ [c] to switch between cameras [ Follow | Side Follow | Wide | Flythrough ]\n▪️ [a] to toggle the complete animation [ off by default ]\n▪️ [i] to toggle planet information popup [ off by default ]\n▪️ [p] to capture an image with current width and height [IPFS]\n▪️ [s] to open the image capture popup on the top right [IPFS]\n▪️▪️ On mobile tap top right of the screen to open the popup\n▪️ The piece does not stretch but instead it adjusts to the screen size and ratio\n▪️ Designed to have a strong visual impact so might not be suitable for mobile\n▪️ There's a little easter egg in the console ;)",
            "tags": [
              "interactive",
              "animated",
              "greyscale",
              "monochrome",
              "shapes",
              "edges",
              "strong",
              "black and white",
              "greyscale",
              "space",
              "planets",
              "planetary",
              "orbit",
              "sci-fi",
              "vectorz3r0"
            ],
            "generatorUri": "ipfs://QmV5AmvqfgMw1Addjz2SyXJpm3nZNKeSvWVjxRNW7AQQzU",
            "artifactUri": "ipfs://QmV5AmvqfgMw1Addjz2SyXJpm3nZNKeSvWVjxRNW7AQQzU/?fxhash=oo98R5iot9AYZWHiFqSuH67bCbWqDYK7zZbfW23nEkWQhwmGiFJ",
            "displayUri": "ipfs://QmVxCqMRqzD2oxxbRvjD3yEXU61KqMuhgZ9ZCp74B6rp1q",
            "thumbnailUri": "ipfs://QmTUGor8m4WCxXFSY6smAFp2fKzRuUzTZNiajhsxXEj5Wq",
            "authenticityHash": "df6b8c9a60a1b438a20e61f9de3fee5f266a83bdd034c1a297c4f5f3c3c47158",
            "attributes": [
              {
                "name": "Visual Style",
                "value": "Bold"
              },
              {
                "name": "System Name",
                "value": "Xiphias Sphere"
              },
              {
                "name": "Planet Name",
                "value": "Xip-2887"
              },
              {
                "name": "Star Date",
                "value": "3243.01.10"
              },
              {
                "name": "Planet Noise",
                "value": "Fractal"
              },
              {
                "name": "Planet Extrusion",
                "value": "Inward"
              },
              {
                "name": "Planet Ocean",
                "value": "No"
              },
              {
                "name": "Planet Coverage",
                "value": "Atmosphere"
              },
              {
                "name": "Planet Rings",
                "value": 1
              },
              {
                "name": "Orbital Prop",
                "value": "Satellite"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969472,
            "version": 1,
            "price": 88880000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1UBTA5zR9NQrBgLVA8nnhzb1wyAYXuZyUz",
            "name": "bnell01",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Planetary",
            "author": {
              "id": "tz1SrA7UpvzPmxp6NymuzDzaRfxDSJaz6ebF",
              "name": "vectorz3r0",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmdeUpNJEedQGFHr73xrp1oNdV4X1mKaNuT5hoRoemJHp4",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969471,
        "version": 1,
        "price": 7100000,
        "objkt": {
          "id": "FX0-1463674",
          "version": 1,
          "name": "Afterlife #71",
          "slug": "afterlife-71",
          "metadata": {
            "name": "Afterlife #71",
            "iterationHash": "ooD7vLs7jEX9CBCwnQYftAuikZ5qRetBGHckLmR2g5ZkwqvgDZK",
            "description": "I feel like my files have been corrupted, in this mess I can't find what's missing.\n\nLike a puzzle, I try to fit my memories together to make me feel alive again.\n\n--------------------------------------------------------\nFeatures:\n\"Size\": Small, Large\n\"Shadow\": False, True\n\"Palette\": 17 palettes with countless possibilities in each one\n\"Ball Grid Array\": False, True\n\"Stroke\": No Stroke, Black, Colorful\n\"Angle\": False, True\n\"Memory Density\": High, Low\n\"Irregular Memories\": False, True\n\n--------------------------------------------------------\nConstrols in live mode:\nOn desktop: Press 's' to save as PNG (2934x3894)\nOn mobile: Touch the screen to save as PNG (2934x3894)\n\nArtwork created with p5.js and love.\nOctober-November 2022\n\nCC BY-NC-SA 4.0 License",
            "tags": [
              "p5js",
              "javascript"
            ],
            "generatorUri": "ipfs://QmPfdpbBqpV7BJk7B7wvzA8kQQmyM8pdA4RQpsAgDbQEWb",
            "artifactUri": "ipfs://QmPfdpbBqpV7BJk7B7wvzA8kQQmyM8pdA4RQpsAgDbQEWb?fxhash=ooD7vLs7jEX9CBCwnQYftAuikZ5qRetBGHckLmR2g5ZkwqvgDZK",
            "displayUri": "ipfs://QmWwoMQP781i9Lh6y2CDDtkdY9fDdfBEhshtJq2vse41Qz",
            "thumbnailUri": "ipfs://Qmbg22eqiRvnLhSuN2M9xLH5ZMoCUxB5AivbGtoYNYfc7f",
            "authenticityHash": "9359a2ace131030eae484d7bd8ebba9061a09860d5fd0d8be2095ce420a4d0cf",
            "attributes": [
              {
                "name": "Size",
                "value": "Large"
              },
              {
                "name": "Shadow",
                "value": false
              },
              {
                "name": "Palette",
                "value": "Nitrogen"
              },
              {
                "name": "Ball Grid Array",
                "value": true
              },
              {
                "name": "Stroke",
                "value": "Colorful"
              },
              {
                "name": "Angle",
                "value": true
              },
              {
                "name": "Memory Density",
                "value": "High"
              },
              {
                "name": "Irregular Memories",
                "value": true
              }
            ],
            "decimals": 0,
            "symbol": "GENTK",
            "version": "0.2"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969471,
            "version": 1,
            "price": 7100000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1UBTA5zR9NQrBgLVA8nnhzb1wyAYXuZyUz",
            "name": "bnell01",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Afterlife",
            "author": {
              "id": "tz1cmN3L3SUkU19WecfEx7EKxgvYcLHg5tmU",
              "name": "Tendenzy",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmTspAit692XfmzSLdDDkSvzFjXCjLYNo1dyFNppkPZFMv",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      },
      {
        "id": 969470,
        "version": 1,
        "price": 123450000,
        "objkt": {
          "id": "FX0-11878",
          "version": 0,
          "name": "Glipsian Early Warning Collision Detection #30",
          "slug": "glipsian-early-warning-collision-detection-30",
          "metadata": {
            "name": "Glipsian Early Warning Collision Detection #30",
            "iterationHash": "oo9oxAAucdcVsvbHrnffDe3KpEJDnK4JdkSWvxckkMyt6JrQRn4",
            "description": "Terminal GUI of a Standard Issue Glipsian Early Warning Collision Detection System used by Glipsite's of Spectra B (N-09-07) to track collision paths of interplanetary waste & debris for safe interstellar travel. \n\nMade with p5.js ✨",
            "tags": [
              "generative",
              "animated",
              "console",
              "terminal",
              "window",
              "p5",
              "RGB",
              "graph"
            ],
            "artifactUri": "ipfs://QmaB34n6rrtaC6e98oPQa3wsWbeYThMzeRmH56QQXSR4Zd",
            "displayUri": "ipfs://QmXXCpy9cqB24pViaEf5bzAsxm39k3TpznJBNVhFt573mS",
            "thumbnailUri": "ipfs://QmRofneA8sP4LMSfrZWvqTYwNWgcvPL8TRCYi4fDy5ZoBa",
            "authenticityHash": "59d706ed66a96f5a69d8e853843adfd5cd5ba846a98bba5a8e98606ffa9ded14",
            "attributes": [
              {
                "name": "Number of Lines",
                "value": 10
              },
              {
                "name": "Inverted",
                "value": true
              },
              {
                "name": "Grid Division",
                "value": 0
              },
              {
                "name": "Line Style",
                "value": "Dot"
              },
              {
                "name": "Line Colour",
                "value": "green"
              },
              {
                "name": "Crosshair Type",
                "value": "Circled Square"
              },
              {
                "name": "Marker Type",
                "value": "Circled Square"
              },
              {
                "name": "Marker color",
                "value": "red"
              },
              {
                "name": "Crosshair color",
                "value": "red"
              }
            ],
            "decimals": 0,
            "symbol": "GENTK"
          },
          "duplicate": false,
          "activeListing": {
            "id": 969470,
            "version": 1,
            "price": 123450000,
            "__typename": "Listing"
          },
          "owner": {
            "id": "tz1UBTA5zR9NQrBgLVA8nnhzb1wyAYXuZyUz",
            "name": "bnell01",
            "flag": "NONE",
            "avatarUri": null,
            "__typename": "User"
          },
          "issuer": {
            "flag": "NONE",
            "name": "Glipsian Early Warning Collision Detection",
            "author": {
              "id": "tz1VMSfs6sxfv94puiVB7xPvtYgiX6L31bmF",
              "name": "09-07",
              "type": "REGULAR",
              "avatarUri": "ipfs://QmPvdgoqWkRnw83p3SeZeZ9iCjF5BmgSCLAjFEv7iX3pM5",
              "flag": "VERIFIED",
              "collaborators": null,
              "__typename": "User"
            },
            "__typename": "GenerativeToken"
          },
          "__typename": "Objkt"
        },
        "__typename": "Listing"
      }
    ]
  }
}
